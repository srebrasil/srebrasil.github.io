---
layout: post 
title:  "Porque implementar observabilidade no design"
date:   2022-08-15 08:00:00 -0300 --->
published: true
tag: "Edi√ß√£o #23 - 15.08.2022"
headline: "Porque implementar observabilidade no design"
highlight_title: "Why Observability Is Shifting Left"
highlight_url: "https://thenewstack.io/why-observability-is-shifting-left/"
highlight_autor: "Ilan Peleg"
image: /images/obs_design_post.png
comentado_por: "Ricardo Coelho de Sousa"
comentado_por_linkedin: "https://www.linkedin.com/in/rcsousa1‚Äù
---
Observabilidade talvez seja o t√≥pico mais comentado nos c√≠rculos de engenharia de confiabilidade e DevOps atualmente. Muito do que se discute sobre o tema √© sobre a necessidade de capturar o m√°ximo de informa√ß√µes ou sinais sobre os sistemas (que ficam sempre mais complexos), para que no advento dos incidentes os **times t√©cnicos sejam capazes de investigar esses sinais e chegar, de forma r√°pida e precisa, ao que antigamente cham√°vamos de causa raiz e hoje identificamos como causa mais prov√°vel**.  

### Qual o problema?

A forma como a observabilidade √© desenvolvida nos sistemas, uma pr√°tica de muitas d√©cadas, √© que os desenvolvedores n√£o precisam se preocupar com a monitora√ß√£o, haja visto que essa √© uma miss√£o dos times de opera√ß√µes de TI, e que os √∫ltimos deveriam adaptar suas rotinas para capturar as informa√ß√µes necess√°rias para que pudessem responder aos eventos em produ√ß√£o. A complexidade dos sistemas e das plataformas de TI mudou tudo. Essa pr√°tica n√£o funciona mais e motivou uma discuss√£o mais alorada sobre o tema. Quem deve ser respons√°vel por instrumentar os sitemas durante o seu desenvolvimento?

Os desenvolvedores tornaram-se co-respons√°veis por emitir alertas que tornassem a opera√ß√£o dos sistemas poss√≠vel e motivou o que o artigo descreve como _Shift-Left_ da observabilidade. Entretando, como n√£o existem boas refer√™ncias (ainda) sobre o que e sobre como instrumentar, haja visto que esse √© um campo ainda em desenvolvimento, o que fizeram os **desenvolvedores incapazes de saber ou advinhar o que n√£o sabem** ü§î ? Decidiram emitir logs para tudo e deixar a miss√£o de entender como utilizar essas informa√ß√µes para os times de opera√ß√µes (SREs, Engenheiros DevOps, Operadores, ou qualquer outra defini√ß√£o aplic√°vel para os times respons√°veis pela resposta de incidentes).

### A necessidade de gerenciar os custos da observabilidade.

Emitir, capturar, armazenar e processar essa quantidade crescente de logs apesar de operacionamente desafiador, **√© economicamente invi√°vel**. Empresas buscam formas de otimizar e criar um racional para quanto valor conseguem gerar para cada GB de logs, m√©tricas e traces armazenados e procuram entender os custos associados a n√£o faz√™-lo.

Sendo assim, e respeitando o axioma de introspec√ß√£o negativa (axioma 5) da l√≥gica modal epist√™mica, que afirma que quando n√£o sabemos de algo, n√£o sabemos que n√£o sabemos, e tamb√©m admitindo que a melhor alternativa para tratar essa situa√ß√£o √© a explora√ß√£o cient√≠fica. Devemos  implementar formas de colaborar, independentemente se somos desenvolvedores ou SRE, engenheiros DevOps ou operadores, para identificar os mecanismos que tornem nossos sistemas observ√°veis e ao mesmo tempo sustent√°veis.

O que voc√™ acha?